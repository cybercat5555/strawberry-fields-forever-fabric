import com.modrinth.minotaur.TaskModrinthUpload

plugins {
    id "fabric-loom" version "0.6-SNAPSHOT"
    id "maven-publish"
    id "com.modrinth.minotaur" version "1.1.0"
}

def ENV = System.getenv()
def buildTime = ENV.BUILD_TIME ?: new Date().format("yyyyMMddHHmmss")

group = "dev.upcraft"
archivesBaseName = "strawberry-fields-forever"

// This field defines the Java version your mod target.
// The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too.
def targetJavaVersion = 8

boolean isPreviewBuild = !ENV.TAG || ENV.TAG.matches(".+-.+")
def buildNumber = !ENV.TAG ? ("${ENV.BUILD_NUMBER ? "build.${ENV.BUILD_NUMBER}" : buildTime}-${project.minecraft_version}") : ""
version = (ENV.TAG ?: "development") + ((isPreviewBuild && !ENV.TAG) ? "+${buildNumber}" : "")

repositories {
    jcenter() // still needed for fiber2cloth
    mavenCentral()
    maven {
        name = "OnyxStudios"
        url = "https://maven.onyxstudios.dev"
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/releases"
    }
    maven {
        url = "https://maven.shedaniel.me"
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
    maven {
        name = "CurseMaven"
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.minecraft_version}+build.${project.yarn_mappings}:v2"
    compileOnly "org.jetbrains:annotations:${project.jetbrains_annotations_version}"

    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")

    modRuntime("me.shedaniel:RoughlyEnoughItems:${project.rei_version}")

    modImplementation(include("io.github.GlassPane:Mesh:${project.mesh_version}")) {
        transitive = false
    }
    modImplementation("io.github.GlassPane:Mesh-API:${project.mesh_version}") {
        transitive = false
    }

    annotationProcessor("io.github.GlassPane:Mesh-Annotations:${project.mesh_version}") {
        transitive = false
    }

    modImplementation "me.zeroeightsix:fiber:${project.fiber_version}"
    modRuntime ("me.shedaniel.cloth:fiber2cloth:${project.fiber2cloth_version}") {
        transitive = false
    }
    modRuntime("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}")

    modRuntime "com.terraformersmc:modmenu:${project.modmenu_version}"
}

processResources {
    // this will ensure that this task is redone when there"s a change
    inputs.property "version", project.version

    filteringCharset = "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }

    rename '(.+).accesswidener', 'META-INF/$1.aww'
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
	// We'll use that if it's available, but otherwise we'll use the older option.
	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release = targetJavaVersion
	}
}

java {
	sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
	targetCompatibility = JavaVersion.toVersion(targetJavaVersion)

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
    withJavadocJar()
}

jar {
	from("LICENSE.md") {
		rename { "LICENSE_${project.archivesBaseName}.md"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
            artifact(javadocJar)
		}
	}

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        if (ENV.MAVEN_UPLOAD_URL) {
            maven {
                url = ENV.MAVEN_UPLOAD_URL
                credentials {
                    username = ENV.MAVEN_UPLOAD_USER
                    password = ENV.MAVEN_UPLOAD_PASSWORD
                }
            }
        }
    }
}

task publishToModrinth(type: TaskModrinthUpload, dependsOn: assemble) {
    if (ENV.MODRINTH_TOKEN) {
        token = ENV.MODRINTH_TOKEN
    }
    projectId = project.modrinth_id
    uploadFile = remapJar
    versionNumber = ENV.TAG ?: version
    versionName = versionNumber // need this here because the Modrinth API doesn't do that by default
    releaseType = isPreviewBuild ? ((ENV.TAG && ENV.TAG.contains("-beta")) ? "beta" : "alpha") : "release"
    "${project.modrinth_game_versions}".split(";").each {
        addGameVersion(it)
    }
    addLoader("fabric")
}

if (ENV.MODRINTH_TOKEN) {
    tasks.publish.dependsOn(publishToModrinth)
}
